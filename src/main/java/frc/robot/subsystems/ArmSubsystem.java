// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


//import frc.robot.commands.*;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
//import edu.wpi.first.wpilibj.motorcontrol.MotorController;
//import edu.wpi.first.wpilibj.motorcontrol.PWMSparkMax;
import edu.wpi.first.wpilibj.shuffleboard.BuiltInLayouts;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardTab;
import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardLayout;
import edu.wpi.first.wpilibj.DutyCycleEncoder;
import com.revrobotics.CANSparkMax;

import com.revrobotics.CANSparkMaxLowLevel.MotorType;



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class ArmSubsystem extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax motorController3;
private CANSparkMax motorController4;
private DutyCycleEncoder m_DutyCycleEncoder;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public ArmSubsystem() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        m_DutyCycleEncoder = new DutyCycleEncoder(0);
        motorController3 = new CANSparkMax(14, MotorType.kBrushless);
        motorController3.setInverted(true);
    

        motorController4 = new CANSparkMax(15, MotorType.kBrushless);
        motorController4.setInverted(false);
        
// motorController3 = new PWMSparkMax(2);
// addChild("Motor Controller 3",motorController3);
// motorController3.setInverted(false);

// motorController4 = new PWMSparkMax(3);
 // addChild("Motor Controller 4",motorController4);
 // motorController4.setInverted(true);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    ShuffleboardTab tab = Shuffleboard.getTab("Drivetrain");

     ShuffleboardLayout encoder_layout = tab.getLayout("Encoder readings", BuiltInLayouts.kList)
    .withSize(2, 4)
    .withPosition(10, 0);
    encoder_layout.addNumber("Absolute Position", m_DutyCycleEncoder::getAbsolutePosition);
    encoder_layout.addNumber("Relative Position", m_DutyCycleEncoder::get);
    encoder_layout.addNumber("Position in Degrees", () -> m_DutyCycleEncoder.getAbsolutePosition() * 360);
    // yes this is the boi ^^^^^

    encoder_layout.addNumber("Relative arm position", () -> m_DutyCycleEncoder.get() * 90);

        // End

    }

    public void set_speed(double value){
        motorController3.set(value);
        motorController4.set(value);
    }

    public double getAngle(){
      return m_DutyCycleEncoder.get() * 90;
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

